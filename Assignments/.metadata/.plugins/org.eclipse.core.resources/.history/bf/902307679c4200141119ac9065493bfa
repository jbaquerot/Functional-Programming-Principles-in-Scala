package week2

object week2_1 {
 	
	val x = new Rational(1,3)                 //> x  : week2.Rational = 1/3
	val y = new Rational(5,7)                 //> y  : week2.Rational = 5/7
	val z = new Rational(3,2)                 //> z  : week2.Rational = 3/2
	
	x.add(y).mul(z)                           //> res0: week2.Rational = 11/7
	
	x.sub(y).sub(z)                           //> res1: week2.Rational = -79/42
	y.add(y)                                  //> res2: week2.Rational = 10/7
	x.less(y)                                 //> res3: Boolean = true
	x.max(y)                                  //> res4: week2.Rational = 5/7
	new Rational(2)
}


class Rational(x: Int, y: Int){
		require(y != 0, "denominator must be nonzero")
		
		def this(x: Int) = this(x, 1)
		
		private def gcd(a: Int, b:Int): Int = if (b == 0) a else gcd(b, a % b)
  	def numer = x / gcd(x,y)
  	def denom = y / gcd(x,y)
  	
  	def less(that: Rational) = numer * that.denom < that.numer * denom
  	def max(that: Rational) = if (this.less(that)) that else this
  	
  	def add(r: Rational) =
  		new Rational(numer * r.denom + r.numer * denom, denom * r.denom)
  	def mul(r: Rational) =
  		new Rational(numer * r.numer , denom * r.denom)
  	def neg =
  		new Rational( -numer, denom)
  	def sub(r: Rational) =
  		new Rational(numer * r.denom - r.numer * denom, denom * r.denom)
  		
  	override def toString = numer + "/" + denom
}