package patmat

import org.scalatest.FunSuite
import common._
import patmat.Huffman._

object worksheet {
    val t1 = Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5)
    val t2 = Fork(Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5), Leaf('d',4), List('a','b','d'), 9)
		val trees = List(t1,t2)
    until(singleton,combine)(trees)
    createCodeTree(string2Chars("cabbaa"))
 	  decode(createCodeTree(string2Chars("cabbaa")) , List(1,0,0,1,1,0,0,1,1))
 	  println(decodedSecret)
 	  
 	  encode(t1)("bab".toList)
 	
 	  decode(t1, encode(t1)("ab".toList))
 	  
 	  def encodeChar(tree:CodeTree, c:Char, accum:List[Bit]): List[Bit] = tree match{
 	  	case Leaf(c1,w) => if (c == c1) accum
 	  										 else List()
 	    case Fork(ltree, rtree, arrchars, w) => encodeChar(ltree, c, 0::accum) ::: encodeChar(rtree, c, 1::acum)
 	  }
}