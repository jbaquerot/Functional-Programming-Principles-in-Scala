package patmat

import org.scalatest.FunSuite
import common._
import patmat.Huffman._

object worksheet {
    val t1 = Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5)
                                                  //> t1  : patmat.Huffman.Fork = Fork(Leaf(a,2),Leaf(b,3),List(a, b),5)
    val t2 = Fork(Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5), Leaf('d',4), List('a','b','d'), 9)
                                                  //> t2  : patmat.Huffman.Fork = Fork(Fork(Leaf(a,2),Leaf(b,3),List(a, b),5),Leaf
                                                  //| (d,4),List(a, b, d),9)
		val trees = List(t1,t2)           //> trees  : List[patmat.Huffman.Fork] = List(Fork(Leaf(a,2),Leaf(b,3),List(a, b
                                                  //| ),5), Fork(Fork(Leaf(a,2),Leaf(b,3),List(a, b),5),Leaf(d,4),List(a, b, d),9)
                                                  //| )
    
    println(decodedSecret)                        //> List(h, u, f, f, m, a, n, e, s, t, c, o, o, l)
    
    val table = convert(t2)                       //> table  : patmat.Huffman.CodeTable = List((a,List(0, 0)), (b,List(0, 1)), (d,
                                                  //| List(1)))
    codeBits(table)('d')                          //> res0: List[patmat.Huffman.Bit] = List(1)
    
    def quickEncode(tree: CodeTree)(text: List[Char]): List[Bit] = {
    	def quickEncodeHelper(table: CodeTable)(text: List[Char]) = text match{
    		case List() => List()
    		case c::xs =>
    				codeBits(table)(c) ::: quickEncode(tree)(xs)
    	}
    	val tabl = convert(tree)
    	quickEncodeHelper(tabl)(text)
    }                                             //> quickEncode: (tree: patmat.Huffman.CodeTree)(text: List[Char])List[patmat.Hu
    
    quickEncode(t2)(val t1 = Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5)
                                                  //| ffman.Bit]
}