package streams

import org.scalatest.FunSuite

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

import Bloxorz._

@RunWith(classOf[JUnitRunner])
class BloxorzSuite extends FunSuite {

  trait SolutionChecker extends GameDef with Solver with StringParserTerrain {
    /**
     * This method applies a list of moves `ls` to the block at position
     * `startPos`. This can be used to verify if a certain list of moves
     * is a valid solution, i.e. leads to the goal.
     */
    def solve(ls: List[Move]): Block =
      ls.foldLeft(startBlock) { case (block, move) => move match {
        case Left => block.left
        case Right => block.right
        case Up => block.up
        case Down => block.down
      }
    }
  }

  trait Level1 extends SolutionChecker {
      /* terrain for level 1*/

    val level =
    """ooo-------
      |oSoooo----
      |ooooooooo-
      |-ooooooooo
      |-----ooToo
      |------ooo-""".stripMargin

    val optsolution = List(Right, Right, Down, Right, Right, Right, Down)
  }

  test("terrain function level 1") {
    new Level1 {
      assert(terrain(Pos(0,0)), "0,0")
      assert(!terrain(Pos(4,11)), "4,11")
    }
  }

  test("findChar level 1") {
    new Level1 {
      assert(startPos == Pos(1,1))
    }
  }
  
  test("is an standing block") {
    new Level1 {
      val standingBlock = Block(Pos(1,1),Pos(1,1))
      assert(standingBlock.isStanding, "is standing block")
    }
  }
  
  test("is not an standing block") {
    new Level1 {
      val standingBlock = Block(Pos(1,1),Pos(2,1))
      assert(!standingBlock.isStanding, "is not a standing block")
    }
  }
  
  test("Block is Legal") {
    new Level1 {
      val block = Block(Pos(1,1),Pos(2,1))
      assert(block.isLegal, "is a legal block")
    }
  }
  
  test("Block is no Legal") {
    new Level1 {
      val block = Block(Pos(0,4),Pos(0,5))
      assert(!block.isLegal, "is not a legal block")
    }
  }
  
  test("neighbors With History") {
    new Level1 {
    	val nWH = neighborsWithHistory(Block(Pos(1,1),Pos(1,1)), List(Left,Up))
    	val result = Set(
    						(Block(Pos(1,2),Pos(1,3)), List(Right,Left,Up)),
    						(Block(Pos(2,1),Pos(3,1)), List(Down,Left,Up))
    					)
    	assert(nWH.toSet == result, "neighbors With History")
    }
  }
  
   test("new Neighbors Only") {
    new Level1 {
    	val neighbors =  Set(
    						(Block(Pos(1,2),Pos(1,3)), List(Right,Left,Up)),
    						(Block(Pos(2,1),Pos(3,1)), List(Down,Left,Up))
    						).toStream
    	val explored = Set(Block(Pos(1,2),Pos(1,3)), Block(Pos(1,1),Pos(1,1)))
    	
    	val result = Set(
    						(Block(Pos(2,1),Pos(3,1)), List(Down,Left,Up))
    					).toStream
    	//print (newNeighborsOnly(neighbors,explored).toSet)
    	assert( newNeighborsOnly(neighbors,explored).toSet == result.toSet, "New neighbors Only")
    }
  }
  
    test("from") {
    new Level1 {
    	val initial =  Set(
    						(Block(Pos(1,2),Pos(1,3)), List(Right,Left,Up)),
    						(Block(Pos(2,1),Pos(3,1)), List(Down,Left,Up))
    						).toStream
    	val explored = Set(Block(Pos(1,2),Pos(1,3)), Block(Pos(1,1),Pos(1,1)))
    	print("Test from\n")
    	print(from(initial,explored).take(3).toList)
    	print("\n-----\n")
    	//val result = Set(
    	//					(Block(Pos(2,1),Pos(3,1)), List(Down,Left,Up))
    	//				).toStream
    	//print (newNeighborsOnly(neighbors,explored).toSet)
    	//assert( newNeighborsOnly(neighbors,explored).toSet == result.toSet, "New neighbors Only")
    }
  } 
   
  
  
  test("optimal solution for level 1") {
    new Level1 {
      println(solve(solution))
      println(Block(goal, goal))
      assert(solve(solution) == Block(goal, goal))
    }
  }

  test("optimal solution length for level 1") {
    new Level1 {
      assert(solution.length == optsolution.length)
    }
  }
}
