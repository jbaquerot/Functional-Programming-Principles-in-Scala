package patmat

import org.scalatest.FunSuite
import common._
import patmat.Huffman._

object worksheet {
    val t1 = Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5)
    val t2 = Fork(Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5), Leaf('d',4), List('a','b','d'), 9)
		val trees = List(t1,t2)
    
    println(decodedSecret)
    
    val table = convert(t2)
    codeBits(table)('d')
    
    
    quickEncode(t2)(string2Chars("abda"))
    val bits =  List(1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1)
    val bits2 = List(0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1)
    
    val frenchWorld = decode(frenchCode, bits)
    val frenchWorld2 = decode(frenchCode, bits2)
    bits == encode(frenchCode)(frenchWorld)
    bits2 == quickEncode(frenchCode)(frenchWorld2)
    quickEncode(frenchCode)(frenchWorld)
    encode(frenchCode)(frenchWorld)
    
 		createCodeTree(string2Chars("someText"))
                                                  
                                                  

 		
 	def encodeChar(tree:CodeTree, c:Char, accum:List[Bit]): List[Bit] = tree match{
 	  	case Leaf(c1,w) =>
 	  	  if (c == c1) {
 	  	    //println(accum)
 	  	    accum
 	  	  }
 	  	  else List()
 	    case Fork(ltree, rtree, arrchars, w) => {
 	  	  		encodeChar(ltree, c, 0::accum) ::: encodeChar(rtree, c, 1::accum)
 	  	  		
 	    }
 	}
 		
}