package week2

object week2_1 {
 	
	val x = new Rational(1,3)
	val y = new Rational(5,7)
	val z = new Rational(3,2)
	
	x.add(y).mul(z)
	
	x.sub(y).sub(z)
	y.add(y)
	x.less(y)
	x.max(y)
	val strange = new Rational(1, 0)
	strange.add(strange)
}


class Rational(x: Int, y: Int){
		require(y != 0, "denominator must be nonzero"
		private def gcd(a: Int, b:Int): Int = if (b == 0) a else gcd(b, a % b)
  	def numer = x / gcd(x,y)
  	def denom = y / gcd(x,y)
  	
  	def less(that: Rational) = numer * that.denom < that.numer * denom
  	def max(that: Rational) = if (this.less(that)) that else this
  	
  	def add(r: Rational) =
  		new Rational(numer * r.denom + r.numer * denom, denom * r.denom)
  	def mul(r: Rational) =
  		new Rational(numer * r.numer , denom * r.denom)
  	def neg =
  		new Rational( -numer, denom)
  	def sub(r: Rational) =
  		new Rational(numer * r.denom - r.numer * denom, denom * r.denom)
  		
  	override def toString = numer + "/" + denom
}