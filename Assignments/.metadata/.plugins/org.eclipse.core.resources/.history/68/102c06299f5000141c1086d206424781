package patmat

import org.scalatest.FunSuite
import common._
import patmat.Huffman._

object worksheet {
    val t1 = Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5)
                                                  //> t1  : patmat.Huffman.Fork = Fork(Leaf(a,2),Leaf(b,3),List(a, b),5)
    val t2 = Fork(Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5), Leaf('d',4), List('a','b','d'), 9)
                                                  //> t2  : patmat.Huffman.Fork = Fork(Fork(Leaf(a,2),Leaf(b,3),List(a, b),5),Leaf
                                                  //| (d,4),List(a, b, d),9)
		val trees = List(t1,t2)           //> trees  : List[patmat.Huffman.Fork] = List(Fork(Leaf(a,2),Leaf(b,3),List(a, b
                                                  //| ),5), Fork(Fork(Leaf(a,2),Leaf(b,3),List(a, b),5),Leaf(d,4),List(a, b, d),9)
                                                  //| )
    until(singleton,combine)(trees)               //> res0: patmat.Huffman.CodeTree = Fork(Fork(Leaf(a,2),Leaf(b,3),List(a, b),5),
                                                  //| Fork(Fork(Leaf(a,2),Leaf(b,3),List(a, b),5),Leaf(d,4),List(a, b, d),9),List(
                                                  //| a, b, a, b, d),14)
    createCodeTree(string2Chars("abbaa"))
                                                  //> res1: patmat.Huffman.CodeTree = Fork(Fork(Fork(Fork(Leaf(b,1),Leaf(n,1),List
                                                  //| (b, n),2),Fork(Leaf(o,1),Leaf(p,1),List(o, p),2),List(b, n, o, p),4),Fork(Fo
                                                  //| rk(Leaf(r,1),Leaf(t,1),List(r, t),2),Fork(Leaf(a,2),Leaf(s,2),List(a, s),4),
                                                  //| List(r, t, a, s),6),List(b, n, o, p, r, t, a, s),10),Fork(Fork(Leaf(u,2),Lea
                                                  //| f( ,3),List(u,  ),5),Leaf(e,3),List(u,  , e),8),List(b, n, o, p, r, t, a, s,
                                                  //|  u,  , e),18)
}