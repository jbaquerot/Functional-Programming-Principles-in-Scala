package week2

object week2_1 {
 	
	val x = new Rational(1,3)
	val y = new Rational(5,7)
	val z = new Rational(3,2)
	
	x + y.mul(z)
	
	x.sub(y).sub(z)
	y + y
	x < y
	x max y
	new Rational(2)
}


class Rational(x: Int, y: Int){
		require(y != 0, "denominator must be nonzero")
		
		def this(x: Int) = this(x, 1)
		
		private def gcd(a: Int, b:Int): Int = if (b == 0) a else gcd(b, a % b)
  	def numer = x
  	def denom = y
  	
  	def < (that: Rational) = numer * that.denom < that.numer * denom
  	def max(that: Rational) = if (this < that) that else this
  	
  	def + (r: Rational) =
  		new Rational(numer * r.denom + r.numer * denom, denom * r.denom)
  	def mul(r: Rational) =
  		new Rational(numer * r.numer , denom * r.denom)
  	def neg =
  		new Rational( -numer, denom)
  	def sub(r: Rational) =
  		new this + r.neg
  		
  	override def toString = {
  		var g = gcd(numer, denom)
  	  numer/g + "/" + denom/g
  	}
}