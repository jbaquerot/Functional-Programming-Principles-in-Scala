package week3

object lecture3 {
  val t1 = new NonEmpty(3,  Empty,  Empty)
  val t2 = t1 incl 4
}

abstract class IntSet {
  def incl(x: Int): IntSet
  def contains(x: Int): Boolean
  def union(other:IntSet): IntSet
}

class NonEmpty(elem: Int, left: IntSet, right: IntSet) extends IntSet {
  def incl(x: Int): IntSet = {
    if (x < elem) new NonEmpty(elem, left incl x, right)
    else if (x > elem) new NonEmpty(elem, left, right incl x)
    else this
  }

  def contains(x: Int): Boolean = {
    if (x < elem) left contains x
    else if (x > elem) right contains x
    else true
  }
  
  def union(other: NonEmpty): IntSet ={
  	if (this.elem < other.elem) this.left union other
  	else (this.elem > other.elem) other union this.right
  	else this
  }
  
  override def toString = "{" + left + elem + right + "}"

}

object Empty extends IntSet {
  def incl(x: Int): IntSet = new NonEmpty(x,  Empty,  Empty)
  def contains(x: Int): Boolean = false
  def union(other: IntSet) = other
  
  override def toString = "."
}